"use strict";

/**
 * Open a modal with a cool morphing transition
 * Depends on FLIP library by Google
 * @param  {HTMLElement} trigger - element that opens modal when clicked
 * @param  {String} modalId - id of modal element
 * @param  {Objects} options - (optional)
 */
// FLIP is now bundled
// gc.load('flip', '~/node_modules/FLIP/dist/flip.js');
gc.openModal = function(t, a, o) {
    // default settings
    var e = {
        // distance from top of page that modal should be at
        // can be a function or string ('12px', '10%', etc.)
        top: "16px",
        // background color of modal
        // can be a function or string.
        // defaults to the background color of the trigger
        // remember to make the modal text dark if the background color is light for accessibility, e.g. #modal--x { color: #333 }
        color: function() {
            return window.getComputedStyle(t).backgroundColor;
        },
        // callback after modal is closed and animation is complete
        onClose: function() {},
        // only open on mobile devices (<1024px wide) and close modal immediately on desktop
        mobileOnly: !1
    };
    if (void 0 === o) o = e; else for (var n in e) o.hasOwnProperty(n) || (o[n] = e[n]);
    // 'closed', 'open', or 'transition'
        var s = "closed", c = document.getElementById(a);
    // get modal by name
        if (c) {
        var r = c.children[0], i = r.getElementsByClassName("modal__close")[0], l = r.getElementsByClassName("modal__content")[0];
        // only enable on mobile devices
        if (!0 === o.mobileOnly) {
            // don't open modal
            if (1024 <= gc.width) return void console.log("Modal not opened b/c mobileOnly = true");
            gc.addResizeCallback(a, function(e, t) {
                var n;
                1024 <= t && (gc.removeResizeCallback(a), c.style.display = "none !important;", 
                f(!0), n = o.onClose, o.onClose = function() {
                    n(), c.style.display = "";
                });
            });
        }
        // open modal unless already opened
                // allow calling function to close modal
        return "closed" === s && (s = "transition", function(e) {
            // position modal overlay above rest of page
            c.classList.add("overlayed"), 
            // set modal background color
            r.style.backgroundColor = "function" == typeof o.color ? o.color() : o.color, 
            // position the modal directly over the trigger (starting point of morph animation)
            p();
            // animate modal overlay (opacity) and modal box (size & position)
            var t = FLIP.group([ {
                element: c,
                easing: u,
                delay: 0,
                duration: 100
            }, {
                element: r,
                easing: u,
                delay: 50,
                duration: 400
            } ]);
            t.first(), 
            // dynamically set top of modal
            r.style.top = "function" == typeof o.top ? o.top() : o.top, t.last("flipped"), t.invert(), 
            t.play(), gc.addEventListenerOnce(r, "flipComplete", e);
        }
        // animate modal contents
        (h)), f;
    }
    // From Tween.js (MIT license)
    // @see https://github.com/tweenjs/tween.js/blob/master/src/Tween.js
    function u(e) {
        return --e * e * e * e * e + 1;
    }
    function d(e) {
        return (e *= 2) < 1 ? .5 * e * e * e * e * e : .5 * ((e -= 2) * e * e * e * e + 2);
    }
    function p() {
        var e = t.getBoundingClientRect();
        r.style.top = e.top + "px", r.style.left = e.left + "px", r.style.height = e.height + "px", 
        r.style.width = e.width + "px";
    }
    function g(e) {
        e.stopPropagation();
    }
    function h() {
        var e = FLIP.group([ {
            element: l,
            delay: 0,
            duration: 450
        }, {
            element: i,
            delay: 150,
            duration: 300
        } ]);
        e.first(), e.last("flipped"), e.invert(), e.play(), gc.addEventListenerOnce(i, "flipComplete", function() {
            // when modal has opened, make it closeable via click or Esc
            r.addEventListener("click", g), c.addEventListener("click", f), i.addEventListener("click", f), 
            // close modal when Escape is pressed
            gc.addKeyHandler(a, "Escape", 27, f), 
            // modal is completely open and can now be closed
            s = "open";
        });
    }
    function f(e) {
        void 0 === e && (e = !1), "open" === s && (s = "transition", function(e, t) {
            {
                var n;
                !0 === t ? (
                // close modal immediately
                o(), s()) : ((n = FLIP.group([ {
                    element: i,
                    delay: 0,
                    duration: 150
                }, {
                    element: l,
                    delay: 100,
                    duration: 200
                } ])).first(), o(), n.last(), n.invert(), n.play(), gc.addEventListenerOnce(l, "flipComplete", s));
            }
            function o() {
                i.classList.remove("flipped"), l.classList.remove("flipped");
            }
            function s() {
                // teardown close event listeners
                r.removeEventListener("click", g), c.removeEventListener("click", f), gc.removeKeyHandler(a, "Escape"), 
                e(t);
            }
        }(m, e));
    }
    function m(e) {
        var t;
        function n() {
            c.classList.remove("flipped"), r.classList.remove("flipped"), 
            // position the modal directly over the trigger (ending point of morph animation)
            p();
        }
        // Hack! there's an issue where flipComplete fires too soon, before modal has actually collapsed.
                !0 === e ? (n(), t = 0) : (t = 450, (e = FLIP.group([ {
            element: c,
            easing: d,
            delay: 0,
            duration: t - 50
        }, {
            element: r,
            easing: d,
            delay: 0,
            duration: t - 150
        } ])).first(), n(), e.last(), e.invert(), e.play()), setTimeout(function() {
            // don't remove the flipped class on the modal overlay until the very end b/c it makes it display:none;
            c.classList.remove("overlayed"), 
            // remove inline background color, height, width, top, bottom
            r.removeAttribute("style"), 
            // modal is now completely closed so it can be opened
            s = "closed", 
            // call "on close" callback
            o.onClose();
        }, t);
    }
    console.error("Unable to get modal #" + a);
}
/**
 * Setup global search box to suggest popular options to user as they type
 */ , gc.setupGlobalSearch = function(e) {
    // take user to top of page
    window.scrollTo(0, 0);
    var t = document.querySelector(".gs"), n = t.querySelector(".smart-search__input");
    // Only setup smart search component in global header once
        t.classList.contains("gs--setup") || (t.classList.add("gs--setup"), gc.initSmartSearch(t, n, !0, !0)), 
    // focus input field after a delay --------
    // For iOS, focus input immediately (b/c setTimeout won't work!)
    gc.iOS ? n.focus() : setTimeout(function() {
        n.focus();
    }, e);
}, 
/**
 * Initialize smart search component
 * @param  {HTMLElement} containerElem Search component root element
 * @param  {HTMLElement} inputElem     Search component <input>
 * @param  {Boolean} searchPeople      Should GC people also be searched?
 */
gc.initSmartSearch = function(e, d, c, t) {
    var n, o, p = document.getElementById("modal__content--contact"), s = e.querySelector(".smart-search__loading-icon"), e = e.querySelector(".smart-search__button"), g = !1, a = 0, r = [], i = [], 
    // Suggestions for autocomplete. Added as they are loaded.
    // Format: { title: .... , desc: ...., url: .... }
    l = [], 
    // This function forces the autocomplete component to re-render the list of matching search suggestions
    // It is called after new suggestions are loaded. It is re-assigned to an internal function of the search
    // component once it's been loaded and intialized...
    u = function() {};
    // By default, focus the input box upon initialization
        // Clear input. If it was already cleared, ensure the next Escape handler is fired
    function h() {
        // Bug:
        // For some reason, when the user presses Escape and we read inputElem.value, we often get the value
        // that was cleared, instead of an empty string, even when there's clearly nothing in the search box.
        // The prevValue hack detects this case and allows us to pass on the Escape handler instead of just
        // reseting the value to empty each time.
        // Is value empty or the same as the past one (see note above)?
        // Reset it
        (o = d.value) && o !== n ? n = o : (gc.removeKeyHandler("clearSmartSearchInput", "Escape"), 
        !1 === gc.fireNextKeyHandler("Escape") && 
        // This is the only key handler. Keep handling Escape until blurred or another component
        // registers a key handler
        gc.addKeyHandler("clearSmartSearchInput", "Escape", 27, h)), d.value = "";
    }
    // When Search button is pressed, do a search
        function f(e) {
        g || ("string" == typeof e && 3 <= e.length ? 
        // valid search
        window.location.href = "/search/?q=" + encodeURIComponent(d.value) : (
        // invalid search. notify user
        d.value = "", d.placeholder = "Please enter at least 3 letters.", d.focus()));
    }
    // keeps track of loading promises and tells user when something's loading
        function m(e) {
        // show loading message
        1 === (a += e ? 1 : -1) && e ? s.style.opacity = "1" : a || e || (s.style.opacity = "");
    }
    // Load autocomplete library & initialize
        /**
	 * Add fetched suggestions to autocomplete
	 * @param {Array} objs     Array of search suggestion objects
	 * @param {String} type    Value of type property (gets added to each object)
	 */
    function v(e, t) {
        e.length && (e = e.map(function(e) {
            // Add type: {type} property to each object
            return e.type = t, 
            // Add match property to each suggestion that doesn't already have one
            e.match = e.match || e.title || "", e.match || console.error('Search suggestion has no "match" or "title"', e), 
            // Sanitize matches so they only contain alphanumeric words
            e.match = e.match.toLowerCase().replace(/[^a-z\d\s]/g, "").replace(/\s\s+/g, " "), 
            e;
        }), 
        // Add to search suggestions & reset cache
        l = l.concat(e), setTimeout(function() {
            d.cache = {}, u();
        }, 100));
    }
    "boolean" != typeof t && (t = !0), 
    // When Enter is pressed in input field, do a search
    d.addEventListener("keypress", function(e) {
        13 === e.keyCode && f(d.value);
    }), 
    // When Escape is pressed while focusing input field, clear it
    d.addEventListener("focus", function() {
        gc.addKeyHandler("clearSmartSearchInput", "Escape", 27, h);
    }), 
    // Stop listening for Escape once input is no longer focused
    d.addEventListener("blur", function() {
        gc.removeKeyHandler("clearSmartSearchInput", "Escape");
    }), e.addEventListener("click", function() {
        f(d.value);
    }), m(!0), gc.load("autocomplete", "~/js/dist/auto-complete.min.js").then(function() {
        m(!1), new autoComplete({
            selector: d,
            minChars: 3,
            menuClass: "smart-search__suggestions",
            source: function e(t, n) {
                var o = t;
                // Make user input lowercased keep only letters, numbers and spaces
                                t = t.toLowerCase().replace(/[^a-z\d\s]/g, "");
                // match term at the beginning of word
                var s = RegExp("\\b" + t, "i"), a = [];
                // default suggestion (search "whatever you typed")
                                a.push({
                    title: o,
                    url: "/search/?q=" + encodeURIComponent(t),
                    default: !0,
                    type: "link"
                }), 
                // add matching suggestions
                a = a.concat(l.filter(function(e) {
                    return s.test(e.match);
                })), 
                // search people as well
                c && 3 <= t.length && 
                /**
	 * Requests people based on trigram search
	 */
                function(e) {
                    // only fetch each trigram once
                    if (-1 !== i.indexOf(e)) return;
                    i.push(e), m(!0), gc.loadCachedJSON("people-search-" + e, "https://services.goshen.edu/people/search/?person=" + e).then(function(e) {
                        v(
                        /**
	 * Parse People API result to prepare fields for search suggestions
	 *
	 * @todo -> deprecate this function & send better response from API
	 *
	 * @param  {Object} obj Response from People API
	 * @return {Array}      Search suggestions
	 */
                        function(e) {
                            var t, n, o, s = [];
                            // faculty
                                                        for (t = 0; t < e.facultyStaff.length; t++) n = e.facultyStaff[t], 
                            o = n.username, -1 === r.indexOf(o) && (r.push(o), s.push({
                                title: n.name,
                                desc: n.pos_desc,
                                url: "user:" + n.username,
                                person: JSON.stringify({
                                    email: n.email,
                                    ext: n.ext,
                                    phone: n.phone,
                                    location: n.office,
                                    title: n.pos_desc
                                })
                            }));
                            // students
                                                        if (e.students) for (t = 0; t < e.students.length; t++) n = e.students[t], 
                            o = n.username, -1 === r.indexOf(o) && (r.push(o), s.push({
                                title: n.name,
                                desc: "Student",
                                url: "user:" + o,
                                person: JSON.stringify({
                                    email: o + "@goshen.edu",
                                    location: n.location,
                                    phone: n.phone,
                                    title: "Student"
                                })
                            }));
                            return s;
                        }(e), "person"), m(!1);
                    }).catch(function(e) {
                        console.error("Unable to fetch GC people by trigram", e), m(!1);
                    });
                }(t.substr(0, 3)), u = function() {
                    e(t, n);
                }, 
                // console.log('suggestions:', suggestions.length);
                // console.log('cache:', inputElem.cache);
                // console.log('suggesting '+ matches.length + ' matches for '+ term, matches);
                n(a, t);
            },
            renderItem: function(e, t) {
                var t = e.default ? "<b>" + e.title + '</b><span class="smart-search__suggestion--default-search"> - Search goshen.edu</span>' : (
                // find searched words in autocomplete results & highlight them
                t = t.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), n = new RegExp("\\b(" + t.split(" ").join("|") + ")", "i"), 
                e.title.replace(n, "<b>$1</b>")), n = "smart-search__suggestion--" + e.type;
                // extra container classes depending on suggestion contents and type
                                e.desc && (n += " smart-search__suggestion--has-desc");
                // return template for autocomplete item
                                n = [ 
                // item wrapper
                '<div class="smart-search__suggestion autocomplete-suggestion ', n, '" data-val="', e.title, '" data-url="', e.url, '"' ];
                // Add additional info about person as JSON in an HTML attribute,
                // removing any single quotes to prevent escaping errors
                                // add icons
                switch ("person" === e.type && (n = n.concat([ "\" data-person='", e.person.replace(/'/g, "&#39;"), "'" ])), 
                // close <div> tag
                n.push(">"), e.type) {
                  case "person":
                    // avatar icon
                    n.push('<svg class="icon smart-search__suggestion-icon smart-search__suggestion-icon--person" viewBox="0 0 16 16"><path d="M9 11.041v-0.825c1.102-0.621 2-2.168 2-3.716 0-2.485 0-4.5-3-4.5s-3 2.015-3 4.5c0 1.548 0.898 3.095 2 3.716v0.825c-3.392 0.277-6 1.944-6 3.959h14c0-2.015-2.608-3.682-6-3.959z"></path></svg>');
                    break;

                  case "program":
                    // graduation hat icon
                    n.push('<svg class="icon smart-search__suggestion-icon smart-search__suggestion-icon--cap" viewBox="0 0 41 32"><path d="M31.7 15l.3 5.6q0 1.2-1.5 2.3t-4.2 1.5-5.7.6-5.8-.5-4.2-1.6T9 20.5l.5-5.7L19.7 18h1.7zM41 9q0 .6-.2.7l-20 6.3h-.4L8.7 12.3q-.7.6-1.2 2T7 17.5q1 .6 1 2 0 1.2-1 1.8L8 29v.5l-.6.2H4q-.3 0-.4-.2l-.2-.4 1-7.7q-1-.6-1-2 0-1.2 1.2-2 .2-3.5 1.7-5.7l-6-2q-.3 0-.3-.5t.4-.4l20-6.3q0 0 .2 0l20 6.3q.5 0 .5.5z"/></svg>');

                    // don't break to add default "open link" icon as well;
                                      default:
                    // open in new window icon
                    n.push('<svg class="icon smart-search__suggestion-icon smart-search__suggestion-icon--link" viewBox="0 0 16 16"><path d="M4 10c0 0 0.919-3 6-3v3l6-4-6-4v3c-4 0-6 2.495-6 5zM11 12h-9v-6h1.967c0.158-0.186 0.327-0.365 0.508-0.534 0.687-0.644 1.509-1.135 2.439-1.466h-6.914v10h13v-4.197l-2 1.333v0.864z"></path></svg>');
                }
                // add item title & description
                                return (n = n.concat([ 
                // title
                t, 
                // description
                '<div class="smart-search__suggestion-desc">', e.desc, "</div>", 
                // end wrapper
                "</div>" ])).join("");
            },
            onSelect: function(e, t, n) {
                // stop this search from being handled by any other functions
                g = !0, setTimeout(function() {
                    g = !1;
                }, 100);
                // url associated with selected item
                var o = n.getAttribute("data-url"), s = "user:" === (r = o).substr(0, 5) && r.substr(5);
                // a GC person was selected. Display their info
                                if (!1 !== s) {
                    var a = n.getAttribute("data-val"), o = JSON.parse(n.getAttribute("data-person")), c = document.querySelector(".smart-search__suggestions");
                    c.classList.add("smart-search__suggestions--selected"), new Image().src = "https://photo-dir.goshen.edu/showPic.php?uid=" + s + "&size=large";
                    // comma-separate phones if there are multiple
                    var r = [ o.ext, o.phone ].filter(function(e) {
                        return null != e;
                    }).join(","), i = {
                        name: a,
                        username: s,
                        email: o.email,
                        phone: r,
                        title: o.title,
                        location: o.location || "",
                        additionalclasses: "contact--gs-modal"
                    };
                    // console.log(shortcodeAtts);
                    // for faculty & staff, lookup faculty page link
                    "Student" !== o.title && (i.lookuplinknow = "true");
                    var l, u = "[gc_contact_box ";
                    for (l in i) u += l + '="' + i[l] + '" ';
                    u += "]", 
                    // Prepare shortcode for injection in url
                    u = encodeURIComponent(u), gc.loadJSON("/faculty/wp-json/shared-gc/v1/shortcode/?shortcode=" + u).then(function(e) {
                        e.hasOwnProperty("html") ? p.innerHTML = e.html : console.error(e);
                    }), 
                    // open modal
                    gc.openModal(n, "modal--contact", {
                        top: "48px",
                        onClose: function() {
                            c.classList.remove("smart-search__suggestions--selected"), d.removeAttribute("readonly"), 
                            d.focus(), p.innerHTML = "";
                        }
                    }), 
                    // unfocus (blur) the container
                    setTimeout(function() {
                        d.setAttribute("readonly", !0), // hack for Chrome on Android
                        d.blur();
                    }, 0);
                }
                // an item w/ a url was selected. Go to that url
                 else window.location.href = n.getAttribute("data-url");
            }
        }), t && (
        // focus input field and move cursor to the very end
        // http://stackoverflow.com/questions/511088/use-javascript-to-place-cursor-at-end-of-text-in-text-input-element
        d.focus(), d.selectionStart = d.selectionEnd = d.value.length), 
        // on input blur & re-focus, display suggestions immediately, not just after user started typing
        d.addEventListener("focus", function() {
            3 <= d.value.length && d.updateSC(0);
        });
    }).catch(function() {
        // Unable to load Autocomplete library. Search should still work though
        m(!1);
    }), e = "programs-of-study-search", m(!0), gc.loadCachedJSON(e, "~/js/json/" + e + ".json").then(function(e) {
        // add suggestions
        v(e), m(!1);
    }).catch(function() {
        m(!1);
    }), e = "global-search-suggestions", m(!0), gc.loadCachedJSON(e, "/wp-content/shared-gc/includes/configs/" + e + ".json").then(function(e) {
        v(e), m(!1);
    }).catch(function() {
        m(!1);
    });
}, function() {
    var n = "loadGlobalNavImages";
    // Only load images if we're on desktop
        function o() {
        for (var e = document.querySelectorAll(".gn__image img"), t = e.length - 1; 0 <= t; t--) e[t].src = e[t].getAttribute("data-src");
    }
    1024 <= gc.width ? o() : gc.addResizeCallback(n, function(e, t) {
        1024 <= t && (o(), gc.removeResizeCallback(n));
    });
}(), function(t) {
    function n() {
        var 
        // Get hash, e.g. #mathematics
        e = t.location.hash;
        e.length < 2 || null !== (
        // Get :target, e.g. <h2 id="mathematics">...</h2>
        e = document.getElementById(e.slice(1))) && e.getBoundingClientRect().top < 2 && t.scrollBy(0, -o());
    }
    // Calculate fixed header height based on (cached) screen width
        function o() {
        return gc.width < 525 ? 120 : gc.width < 1024 ? 88 : 40;
        // just site nav
        }
    // Expose gc.fixedHeaderHeight(), which is also used by Gravity Form's confirmation-scroll.js
    gc.fixedHeaderHeight = o, 
    // Run on first scroll (in case the user loaded a page with a hash that automatically scrolls down)
    t.addEventListener("scroll", function e() {
        t.removeEventListener("scroll", e);
        n();
    }
    // Run on hash change (user clicked on anchor link)
    ), "onhashchange" in t && t.addEventListener("hashchange", n);
}(window);
//# sourceMappingURL=../sourcemaps/header.min.js.map
